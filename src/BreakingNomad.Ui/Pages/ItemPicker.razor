@using BreakingNomad.Ui.Components
@using BreakingNomad.Ui.Components.MenuMaker.Models
@inject IJSRuntime JsRuntime

<div >
  @foreach (var tag in SelectedItems)
  {
    <span class="badge bg-secondary" style="background-color: @ToColor(tag)">
      @tag.Name
      <span @onclick="() => RemoveItem(tag)" class="oi oi-delete"></span>
    </span>
  }
  <a @onclick="Add">
    <span class="badge rounded-pill bg-primary-subtle mx-3">

      <span class="oi oi-plus"></span>

    </span>
  </a>
  <ItemPickerModal @ref="Modal">
    <Title>Please select a meal</Title>
    <Body>

    @foreach (var tag in AllowedItems.Where(x => !SelectedItems.Contains(x)).OrderByDescending(x => x.MealType == MealType).ThenBy(x => x.MealType).ThenBy(x => x.Name))
    {
      <a @onclick="() => AddToList(tag)">
        <span class="badge bg-secondary mx-3" style="background-color: @ToColor(tag)">
          @tag.Name
        </span>
      </a>
    }
    </Body>
    <Footer>
      <button type="button" @onclick="CloseModal" class="btn btn-primary">Close</button>
    </Footer>
  </ItemPickerModal>

</div>

@code {

  private ItemPickerModal? Modal { get; set; }

  [Parameter]
  public List<MealRecipe> SelectedItems { get; set; } = new();

  [Parameter]
  public List<MealRecipe> AllowedItems { get; set; } = new();

  [Parameter]
  public MealType? MealType { get; set; }

  public bool _isListHidden = true;

  private void RemoveItem(MealRecipe tag)
  {
    SelectedItems.Remove(tag);
  }

  private string ToColor(MealRecipe tag)
  {
    return tag.MealType.ToColor();
  }

  private void Add()
  {
    Modal?.Open();
  }

  private void CloseModal()
  {
    Modal?.Close();
  }

  private void AddToList(MealRecipe tag)
  {
    SelectedItems.Add(tag);
    Modal?.Close();
  }

}
