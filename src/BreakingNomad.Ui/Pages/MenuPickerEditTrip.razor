@page "/menupicker/{id}/update"
@using BreakingNomad.Ui.Components.MenuMaker
@using BreakingNomad.Ui.Components.MenuMaker.Models
@using BreakingNomad.Ui.Helpers
@using BreakingNomad.Ui.Components
@using BreakingNomad.Shared.Services
@using Bumbershoot.Utilities.Helpers

@inject IMenuLookup MenuLookup
@inject NavigationManager NavigationManager

<h2>What are we having today</h2>

@if (_trip == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <div class="row mt-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">@(_trip.Name == "" ? "Trip details" : _trip.Name)</h5>
        @_trip.Description()
      </div>
      <div class="card-body">
        <form @onsubmit="DelayRefresh">
          <div>
            <label for="startDate">Name</label>
            <input type="text" class="form-control" id="name" @bind="Name" required>
          </div>
          <div>
            <label for="startDate">Start Date</label>
            <input type="date" class="form-control" id="startDate" @bind="StartDate" required>
          </div>
          <div>
            <label for="endDate">End Date</label>
            <input type="date" class="form-control" id="endDate" @bind="EndDate" required>
          </div>
          <div>
            <label for="peopleCount">Number of People</label>
            <input type="number" class="form-control" id="peopleCount" @bind="People" required>
          </div>
          @if (_isNew)
          {
            <a @onclick="SaveAndContinue" class="btn btn-primary">Continue</a>
          }
        </form>
      </div>
    </div>
    @if (!_isNew)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5 class="card-title">Meal Schedule</h5>
        </div>
        <div class="card-body">
          <table class="table table-striped">
            <thead>
            <tr>
              <th style="width: 10%">Date</th>
              <th style="width: 20%">Breakfast</th>
              <th style="width: 20%">Lunch</th>
              <th style="width: 20%">Dinner</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var (count,day) in _trip.Dates)
            {
              <tr>
                <td>@day.ToString(FormattingConstants.DateAndDay)</td>
                <td>
                    <ItemPicker CallBack="OnChange" AllowedItems="_allowedValues" MealType="@MealType.Breakfast" SelectedItems="_trip.GetOrAdd(count, MealType.Breakfast)"></ItemPicker>
                </td>
                <td>
                    <ItemPicker CallBack="OnChange" AllowedItems="_allowedValues" MealType="@MealType.Lunch" SelectedItems="_trip.GetOrAdd(count, MealType.Lunch)"></ItemPicker>
                </td>
                <td>
                    <ItemPicker CallBack="OnChange" AllowedItems="_allowedValues" MealType="@MealType.Dinner" SelectedItems="_trip.GetOrAdd(count, MealType.Dinner)"></ItemPicker>
                </td>
              </tr>
            }
            </tbody>
          </table>
        </div>
      </div>

      @if (_shoppingList != null)
      {
        <div class="card mt-4">
          <div class="card-header">
            <h5 class="card-title">Shopping list</h5>
          </div>
          <div class="card-body">
            <table class="table table-striped">
              <thead>
              <tr>
                <th style="width: 20%">Description</th>
                <th style="width: 20%">Quantity</th>
              </tr>
              </thead>
              <tbody>
              @foreach (var item in _shoppingList.Items)
              {
                <tr>
                  <td>@item.Category</td>
                  <td>@item.Name</td>
                  <td>@item.UnitValue</td>
                </tr>
              }
              </tbody>
            </table>
          </div>
        </div>
      }
    }
  </div>
}


@code {
  private TripMenu? _trip;
  private List<MealRecipe>? _allowedValues;
  private ShoppingList? _shoppingList;
  private bool _isNew = true;
  private List<IngredientPerDay> _dailyIngredients = new List<IngredientPerDay>();


  [Parameter]
  public string? Id { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _isNew = Id is null or "new";
    if (_isNew)
    {
      _trip = new TripMenu();
    }
    else
    {
      _trip = await MenuLookup.GetUpComingTrip(Id!);
      _trip.MealsOfTheDay.Dump("_trip");
      
      StateHasChanged();
    }
    _dailyIngredients = MenuLookup.GetAllIngredientsPerDay();
    _allowedValues = MenuLookup.GetMeals();
    _shoppingList = new ShoppingList(_allowedValues, _trip, _dailyIngredients);


  }

  private void DelayRefresh()
  {
    _shoppingList = new ShoppingList(_allowedValues.OrEmpty(), _trip ?? new TripMenu(), _dailyIngredients);
    if (!_isNew)
      MenuLookup.Update(_trip!);
  }

  public DateTime? StartDate
  {
    get => _trip?.StartDate;
    set
    {
      value?.With(x => _trip!.StartDate = x);
      if (_trip != null && _trip.EndDate < _trip.StartDate)
      {
        _trip.EndDate = _trip.StartDate.AddDays(1);
      }
      DelayRefresh();
    }
  }

  public DateTime? EndDate
  {
    get => _trip?.EndDate;
    set
    {
      value?.With(x => _trip!.EndDate = x);
      DelayRefresh();
    }
  }

  public string? Name
  {
    get => _trip?.Name;
    set
    {
      value?.With(x => _trip!.Name = x);
      DelayRefresh();
    }
  }

  public int People
  {
    get => _trip?.People ?? 1;
    set
    {
      _trip!.People = value;
      DelayRefresh();
    }
  }

  private async Task SaveAndContinue()
  {
    if (_trip != null)
    {
      await MenuLookup.Add(_trip);
      NavigationManager.NavigateTo($"menupicker/{_trip.Id}/update");
      _isNew = false;
    }
  }

  private void OnChange()
  {
    DelayRefresh();
  }

}
