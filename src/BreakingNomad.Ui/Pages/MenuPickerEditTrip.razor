@page "/menupicker/{id}/update"
@using Bumbershoot.Utilities.Helpers
@using BreakingNomad.Ui.Components.MenuMaker
@using BreakingNomad.Ui.Components.MenuMaker.Models
@using BreakingNomad.Ui.Components

@inject IMenuLookup MenuLookup
@inject NavigationManager NavigationManager

<h2>What are we having today</h2>

@if (_trip == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <div class="row mt-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">Trip Details</h5>
        @_trip.Name
      </div>
      <div class="card-body">
        <form @onsubmit="DelayRefresh">
          <div>
            <label for="startDate">Name</label>
            <input type="text" class="form-control" id="name" @bind="Name" required>
          </div>
          <div>
            <label for="startDate">Start Date</label>
            <input type="date" class="form-control" id="startDate" @bind="StartDate" required>
          </div>
          <div>
            <label for="endDate">End Date</label>
            <input type="date" class="form-control" id="endDate" @bind="EndDate" required>
          </div>
          <div>
            <label for="peopleCount">Number of People</label>
            <input type="number" class="form-control" id="peopleCount" @bind="People" required>
          </div>
          @if (_isNew) {
            <a @onclick="SaveAndContinue" class="btn btn-primary">Continue</a>
          }
        </form>
      </div>
    </div>
    @if (!_isNew) {
    <div class="card mt-4">
      <div class="card-header">
        <h5 class="card-title">Meal Schedule</h5>
      </div>
      <div class="card-body">
        <table class="table table-striped">
          <thead>
          <tr>
            <th style="width: 10%">Date</th>
            <th style="width: 20%">Breakfast</th>
            <th style="width: 20%">Lunch</th>
            <th style="width: 20%">Dinner</th>
          </tr>
          </thead>
          <tbody>
          @foreach (var day in _trip.DayMeals)
          {
            <tr>
              <td >@day.Day.ToString(FormattingConstants.DateAndDay)</td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@MealType.Breakfast" SelectedItems="day.Breakfast"></ItemPicker>
              </td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@MealType.Lunch" SelectedItems="day.Lunch"></ItemPicker>
              </td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@MealType.Dinner" SelectedItems="day.Dinner"></ItemPicker>
              </td>
            </tr>
          }
          </tbody>
        </table>
      </div>
    </div>
    
    @if (_shoppingList != null)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5 class="card-title">Shopping list</h5>
        </div>
        <div class="card-body">
          <table class="table table-striped">
            <thead>
            <tr>
              <th style="width: 20%">Description</th>
              <th style="width: 20%">Quantity</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in _shoppingList)
            {
              <tr>
                <td>@item.Category</td>
                <td>@item.Name</td>
                <td>@item.UnitValue</td>

              </tr>
            }
            </tbody>
          </table>
        </div>
      </div>
      }     }
  </div>
}


@code {
  private TripMenu? _trip;
  private List<MealRecipe>? _allowedValues;
  private List<ShoppingListItem>? _shoppingList;
  private bool _isNew = true;


  [Parameter]
  public string? Id { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _isNew = Id is null or "new";
    if (_isNew)
    {
      _trip = new TripMenu();
    }
    else
    {
      _trip = await MenuLookup.GetUpComingTrip(Id!);
    }
    _allowedValues = MenuLookup.GetMeals();
    _shoppingList = _trip?.ShoppingListItem.ToList();
  }


  private List<MealRecipe> Lists(MealRecipe? recipe)
  {
    var stringList = new List<MealRecipe>();
    if (recipe != null) stringList.Add(recipe);
    return stringList;
  }

  private void DelayRefresh()
  {
    _trip?.Calculate();
    _shoppingList = _trip?.ShoppingListItem.ToList();
    if (!_isNew) 
      MenuLookup.Update(_trip!);
  }

  public DateTime? StartDate
  {
    get => _trip?.StartDate;
    set
    {
      value?.With(x => _trip!.StartDate = x);
      if (_trip != null && _trip.EndDate < _trip.StartDate)
      {
        _trip.EndDate = _trip.StartDate.AddDays(1);
      }
      DelayRefresh();
    }
  }

  public DateTime? EndDate
  {
    get => _trip?.EndDate;
    set
    {
      value?.With(x => _trip!.EndDate = x);
      DelayRefresh();
    }
  }

  public string? Name
  {
    get => _trip?.Name;
    set
    {
      value?.With(x => _trip!.Name = x);
      DelayRefresh();
    }
  }

  public int People
  {
    get => _trip?.People ?? 1;
    set
    {
      _trip!.People = value;
      DelayRefresh();
    }
  }

  private async Task SaveAndContinue()
  {
    if (_trip != null)
    {
      await MenuLookup.Add(_trip);
      NavigationManager.NavigateTo($"menupicker/{_trip.Id}/update");
      _isNew = false;
    }
    
  }

}
