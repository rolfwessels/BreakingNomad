@page "/menupicker/{id}/update"
@using BreakingNomad.Ui.Components.MenuMaker
@using BreakingNomad.Ui.Components.MenuMaker.Models
@using BreakingNomad.Ui.Components

@inject IMenuLookup MenuLookup

<h2>Planning for up coming meals</h2>

@if (_trip == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <div class="row mt-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">Trip Details</h5>
        @_trip.Name
      </div>
      <div class="card-body">
        <form >
          <div>
            <label for="startDate">Start Date</label>
            <input type="date" class="form-control" id="startDate" @bind="_trip.StartDate" required>
          </div>
          <div>
            <label for="endDate">End Date</label>
            <input type="date" class="form-control" id="endDate" @bind="_trip.EndDate" required>
          </div>
          <div>
            <label for="peopleCount">Number of People</label>
            <input type="number" class="form-control" id="peopleCount" @bind="_trip.People" required>
          </div>
          <button type="button" @onclick="() => OnClick()" class="btn btn-primary">Submit</button>
        </form>
      </div>
    </div>

    <div class="card mt-4">
      <div class="card-header">
        <h5 class="card-title">Meal Schedule</h5>
      </div>
      <div class="card-body">
        <table class="table table-striped">
          <thead>
          <tr>
            <th style="width: 10%">Date</th>
            <th style="width: 20%">Breakfast</th>
            <th style="width: 20%">Lunch</th>
            <th style="width: 20%">Snacks</th>
            <th style="width: 20%">Dinner</th>
          </tr>
          </thead>
          <tbody>
          @foreach (var day in _trip.DayMeals)
          {
            <tr>
              <td >@day.Day.ToString(FormattingConstants.DateAndDay)</td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@Meal.Breakfast" SelectedItems="Lists(day.Breakfast)"></ItemPicker>
              </td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@Meal.Lunch" SelectedItems="Lists(day.Lunch)"></ItemPicker>
              </td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@Meal.Lunch" SelectedItems="Lists(day.Snacks)"></ItemPicker>
              </td>
              <td>
                <ItemPicker AllowedItems="_allowedValues" MealType="@Meal.Dinner" SelectedItems="Lists(day.Dinner)"></ItemPicker>
              </td>
            </tr>
          }
          </tbody>
        </table>
      </div>
    </div>
  </div>
}


@code {
  private TripMenu? _trip;
  private List<Recipy>? _allowedValues;

  [Parameter]
  public string? Id { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _trip = (await MenuLookup.GetUpComingTrip()).FirstOrDefault(x => x.Id == Id);
    _allowedValues = _trip?.AllRecipies.ToList();
  }


  private void OnClick()
  {
    _trip?.Calculate();
  }


  private List<Recipy> Lists(Recipy? recipe)
  {
    var stringList = new List<Recipy>();
    if (recipe != null) stringList.Add(recipe);
    return stringList;
  }

}
